{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nvar breakpoints = ['sm', 'md', 'lg', 'xl'];\n\nvar breakpointProps = function () {\n  return breakpoints.reduce(function (props, val) {\n    props[val] = {\n      type: [Boolean, String, Number],\n      \"default\": false\n    };\n    return props;\n  }, {});\n}();\n\nvar offsetProps = function () {\n  return breakpoints.reduce(function (props, val) {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      \"default\": null\n    };\n    return props;\n  }, {});\n}();\n\nvar orderProps = function () {\n  return breakpoints.reduce(function (props, val) {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      \"default\": null\n    };\n    return props;\n  }, {});\n}();\n\nvar propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps)\n};\n\nfunction breakpointClass(type, prop, val) {\n  var className = type;\n\n  if (val == null || val === false) {\n    return undefined;\n  }\n\n  if (prop) {\n    var breakpoint = prop.replace(type, '');\n    className += \"-\".concat(breakpoint);\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += \"-\".concat(val);\n  return className.toLowerCase();\n}\n\nvar cache = new Map();\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    cols: {\n      type: [Boolean, String, Number],\n      \"default\": false\n    }\n  }, breakpointProps), {}, {\n    offset: {\n      type: [String, Number],\n      \"default\": null\n    }\n  }, offsetProps), {}, {\n    order: {\n      type: [String, Number],\n      \"default\": null\n    }\n  }, orderProps), {}, {\n    alignSelf: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str);\n      }\n    },\n    tag: {\n      type: String,\n      \"default\": 'div'\n    }\n  }),\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children,\n        parent = _ref.parent;\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    var cacheKey = '';\n\n    for (var prop in props) {\n      cacheKey += String(props[prop]);\n    }\n\n    var classList = cache.get(cacheKey);\n\n    if (!classList) {\n      (function () {\n        var _classList$push;\n\n        classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n        var type;\n\n        for (type in propMap) {\n          propMap[type].forEach(function (prop) {\n            var value = props[prop];\n            var className = breakpointClass(type, prop, value);\n            if (className) classList.push(className);\n          });\n        }\n\n        var hasColClasses = classList.some(function (className) {\n          return className.startsWith('col-');\n        });\n        classList.push((_classList$push = {\n          // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n          col: !hasColClasses || !props.cols\n        }, _defineProperty(_classList$push, \"col-\".concat(props.cols), props.cols), _defineProperty(_classList$push, \"offset-\".concat(props.offset), props.offset), _defineProperty(_classList$push, \"order-\".concat(props.order), props.order), _defineProperty(_classList$push, \"align-self-\".concat(props.alignSelf), props.alignSelf), _classList$push));\n        cache.set(cacheKey, classList);\n      })();\n    }\n\n    return h(props.tag, mergeData(data, {\n      \"class\": classList\n    }), children);\n  }\n});","map":{"version":3,"mappings":"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","names":["Vue","mergeData","upperFirst","breakpoints","breakpointProps","reduce","props","val","type","Boolean","String","Number","offsetProps","orderProps","propMap","col","Object","keys","offset","order","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","cache","Map","extend","name","functional","cols","alignSelf","validator","includes","str","tag","render","h","data","children","parent","cacheKey","classList","get","forEach","value","push","hasColClasses","some","startsWith","set"],"sourceRoot":"","sources":["../../../src/components/VGrid/VCol.ts"],"sourcesContent":["import './VGrid.sass'\n\nimport Vue, { VNode, PropOptions } from 'vue'\nimport mergeData from '../../util/mergeData'\nimport { upperFirst } from '../../util/helpers'\n\n// no xs\nconst breakpoints = ['sm', 'md', 'lg', 'xl']\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps),\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: boolean | string | number) {\n  let className = type\n  if (val == null || val === false) {\n    return undefined\n  }\n  if (prop) {\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase()\n  }\n  // .order-md-6\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst cache = new Map<string, any[]>()\n\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null,\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null,\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: (str: any) => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str),\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n  render (h, { props, data, children, parent }): VNode {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = ''\n    for (const prop in props) {\n      cacheKey += String((props as any)[prop])\n    }\n    let classList = cache.get(cacheKey)\n\n    if (!classList) {\n      classList = []\n      // Loop through `col`, `offset`, `order` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string | number | boolean = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('col-'))\n\n      classList.push({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols,\n        [`col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n      })\n\n      cache.set(cacheKey, classList)\n    }\n\n    return h(props.tag, mergeData(data, { class: classList }), children)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}