{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// Mixins\nimport Delayable from '../delayable';\nimport Toggleable from '../toggleable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { getSlot, getSlotType } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nvar baseMixins = mixins(Delayable, Toggleable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'activatable',\n  props: {\n    activator: {\n      \"default\": null,\n      validator: function validator(val) {\n        return ['string', 'object'].includes(_typeof(val));\n      }\n    },\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    openOnHover: Boolean,\n    openOnFocus: Boolean\n  },\n  data: function data() {\n    return {\n      // Do not use this directly, call getActivator() instead\n      activatorElement: null,\n      activatorNode: [],\n      events: ['click', 'mouseenter', 'mouseleave', 'focus'],\n      listeners: {}\n    };\n  },\n  watch: {\n    activator: 'resetActivator',\n    openOnFocus: 'resetActivator',\n    openOnHover: 'resetActivator'\n  },\n  mounted: function mounted() {\n    var slotType = getSlotType(this, 'activator', true);\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(\"The activator slot must be bound, try '<template v-slot:activator=\\\"{ on }\\\"><v-btn v-on=\\\"on\\\">'\", this);\n    }\n\n    this.addActivatorEvents();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeActivatorEvents();\n  },\n  methods: {\n    addActivatorEvents: function addActivatorEvents() {\n      if (!this.activator || this.disabled || !this.getActivator()) return;\n      this.listeners = this.genActivatorListeners();\n      var keys = Object.keys(this.listeners);\n\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n        this.getActivator().addEventListener(key, this.listeners[key]);\n      }\n    },\n    genActivator: function genActivator() {\n      var node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes()\n      })) || [];\n      this.activatorNode = node;\n      return node;\n    },\n    genActivatorAttributes: function genActivatorAttributes() {\n      return {\n        role: this.openOnClick && !this.openOnHover ? 'button' : undefined,\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive)\n      };\n    },\n    genActivatorListeners: function genActivatorListeners() {\n      var _this = this;\n\n      if (this.disabled) return {};\n      var listeners = {};\n\n      if (this.openOnHover) {\n        listeners.mouseenter = function (e) {\n          _this.getActivator(e);\n\n          _this.runDelay('open');\n        };\n\n        listeners.mouseleave = function (e) {\n          _this.getActivator(e);\n\n          _this.runDelay('close');\n        };\n      } else if (this.openOnClick) {\n        listeners.click = function (e) {\n          var activator = _this.getActivator(e);\n\n          if (activator) activator.focus();\n          e.stopPropagation();\n          _this.isActive = !_this.isActive;\n        };\n      }\n\n      if (this.openOnFocus) {\n        listeners.focus = function (e) {\n          _this.getActivator(e);\n\n          e.stopPropagation();\n          _this.isActive = !_this.isActive;\n        };\n      }\n\n      return listeners;\n    },\n    getActivator: function getActivator(e) {\n      var _activator; // If we've already fetched the activator, re-use\n\n\n      if (this.activatorElement) return this.activatorElement;\n      var activator = null;\n\n      if (this.activator) {\n        var target = this.internalActivator ? this.$el : document;\n\n        if (typeof this.activator === 'string') {\n          // Selector\n          activator = target.querySelector(this.activator);\n        } else if (this.activator.$el) {\n          // Component (ref)\n          activator = this.activator.$el;\n        } else {\n          // HTMLElement | Element\n          activator = this.activator;\n        }\n      } else if (this.activatorNode.length === 1 || this.activatorNode.length && !e) {\n        // Use the contents of the activator slot\n        // There's either only one element in it or we\n        // don't have a click event to use as a last resort\n        var vm = this.activatorNode[0].componentInstance;\n\n        if (vm && vm.$options.mixins && //                         Activatable is indirectly used via Menuable\n        vm.$options.mixins.some(function (m) {\n          return m.options && ['activatable', 'menuable'].includes(m.options.name);\n        })) {\n          // Activator is actually another activatible component, use its activator (#8846)\n          activator = vm.getActivator();\n        } else {\n          activator = this.activatorNode[0].elm;\n        }\n      } else if (e) {\n        // Activated by a click or focus event\n        activator = e.currentTarget || e.target;\n      } // The activator should only be a valid element (Ignore comments and text nodes)\n\n\n      this.activatorElement = ((_activator = activator) == null ? void 0 : _activator.nodeType) === Node.ELEMENT_NODE ? activator : null;\n      return this.activatorElement;\n    },\n    getContentSlot: function getContentSlot() {\n      return getSlot(this, 'default', this.getValueProxy(), true);\n    },\n    getValueProxy: function getValueProxy() {\n      var self = this;\n      return {\n        get value() {\n          return self.isActive;\n        },\n\n        set value(isActive) {\n          self.isActive = isActive;\n        }\n\n      };\n    },\n    removeActivatorEvents: function removeActivatorEvents() {\n      if (!this.activator || !this.activatorElement) return;\n      var keys = Object.keys(this.listeners);\n\n      for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {\n        var key = _keys2[_i2];\n        this.activatorElement.removeEventListener(key, this.listeners[key]);\n      }\n\n      this.listeners = {};\n    },\n    resetActivator: function resetActivator() {\n      this.removeActivatorEvents();\n      this.activatorElement = null;\n      this.getActivator();\n      this.addActivatorEvents();\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["Delayable","Toggleable","mixins","getSlot","getSlotType","consoleError","baseMixins","extend","name","props","activator","validator","includes","val","disabled","Boolean","internalActivator","openOnClick","type","openOnHover","openOnFocus","data","activatorElement","activatorNode","events","listeners","watch","mounted","slotType","addActivatorEvents","beforeDestroy","removeActivatorEvents","methods","getActivator","genActivatorListeners","keys","Object","key","addEventListener","genActivator","node","assign","getValueProxy","on","attrs","genActivatorAttributes","role","undefined","String","isActive","mouseenter","e","runDelay","mouseleave","click","focus","stopPropagation","target","$el","document","querySelector","length","vm","componentInstance","$options","some","m","options","elm","currentTarget","nodeType","Node","ELEMENT_NODE","getContentSlot","self","value","removeEventListener","resetActivator"],"sourceRoot":"","sources":["../../../src/mixins/activatable/index.ts"],"sourcesContent":["// Mixins\nimport Delayable from '../delayable'\nimport Toggleable from '../toggleable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { getSlot, getSlotType } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\n\n// Types\nimport { VNode, PropType } from 'vue'\n\ntype Listeners = Dictionary<(e: MouseEvent & KeyboardEvent & FocusEvent) => void>\n\nconst baseMixins = mixins(\n  Delayable,\n  Toggleable\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'activatable',\n\n  props: {\n    activator: {\n      default: null as unknown as PropType<string | HTMLElement | VNode | Element | null>,\n      validator: (val: string | object) => {\n        return ['string', 'object'].includes(typeof val)\n      },\n    },\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnClick: {\n      type: Boolean,\n      default: true,\n    },\n    openOnHover: Boolean,\n    openOnFocus: Boolean,\n  },\n\n  data: () => ({\n    // Do not use this directly, call getActivator() instead\n    activatorElement: null as HTMLElement | null,\n    activatorNode: [] as VNode[],\n    events: ['click', 'mouseenter', 'mouseleave', 'focus'],\n    listeners: {} as Listeners,\n  }),\n\n  watch: {\n    activator: 'resetActivator',\n    openOnFocus: 'resetActivator',\n    openOnHover: 'resetActivator',\n  },\n\n  mounted () {\n    const slotType = getSlotType(this, 'activator', true)\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(`The activator slot must be bound, try '<template v-slot:activator=\"{ on }\"><v-btn v-on=\"on\">'`, this)\n    }\n\n    this.addActivatorEvents()\n  },\n\n  beforeDestroy () {\n    this.removeActivatorEvents()\n  },\n\n  methods: {\n    addActivatorEvents () {\n      if (\n        !this.activator ||\n        this.disabled ||\n        !this.getActivator()\n      ) return\n\n      this.listeners = this.genActivatorListeners()\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        this.getActivator()!.addEventListener(key, this.listeners[key] as any)\n      }\n    },\n    genActivator () {\n      const node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes(),\n      })) || []\n\n      this.activatorNode = node\n\n      return node\n    },\n    genActivatorAttributes () {\n      return {\n        role: (this.openOnClick && !this.openOnHover) ? 'button' : undefined,\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive),\n      }\n    },\n    genActivatorListeners () {\n      if (this.disabled) return {}\n\n      const listeners: Listeners = {}\n\n      if (this.openOnHover) {\n        listeners.mouseenter = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('open')\n        }\n        listeners.mouseleave = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('close')\n        }\n      } else if (this.openOnClick) {\n        listeners.click = (e: MouseEvent) => {\n          const activator = this.getActivator(e)\n          if (activator) activator.focus()\n\n          e.stopPropagation()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      if (this.openOnFocus) {\n        listeners.focus = (e: FocusEvent) => {\n          this.getActivator(e)\n\n          e.stopPropagation()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      return listeners\n    },\n    getActivator (e?: Event): HTMLElement | null {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement\n\n      let activator = null\n\n      if (this.activator) {\n        const target = this.internalActivator ? this.$el : document\n\n        if (typeof this.activator === 'string') {\n          // Selector\n          activator = target.querySelector(this.activator)\n        } else if ((this.activator as any).$el) {\n          // Component (ref)\n          activator = (this.activator as any).$el\n        } else {\n          // HTMLElement | Element\n          activator = this.activator\n        }\n      } else if (this.activatorNode.length === 1 || (this.activatorNode.length && !e)) {\n        // Use the contents of the activator slot\n        // There's either only one element in it or we\n        // don't have a click event to use as a last resort\n        const vm = this.activatorNode[0].componentInstance\n        if (\n          vm &&\n          vm.$options.mixins && //                         Activatable is indirectly used via Menuable\n          vm.$options.mixins.some((m: any) => m.options && ['activatable', 'menuable'].includes(m.options.name))\n        ) {\n          // Activator is actually another activatible component, use its activator (#8846)\n          activator = (vm as any).getActivator()\n        } else {\n          activator = this.activatorNode[0].elm as HTMLElement\n        }\n      } else if (e) {\n        // Activated by a click or focus event\n        activator = (e.currentTarget || e.target) as HTMLElement\n      }\n\n      // The activator should only be a valid element (Ignore comments and text nodes)\n      this.activatorElement = activator?.nodeType === Node.ELEMENT_NODE ? activator : null\n\n      return this.activatorElement\n    },\n    getContentSlot () {\n      return getSlot(this, 'default', this.getValueProxy(), true)\n    },\n    getValueProxy (): object {\n      const self = this\n      return {\n        get value () {\n          return self.isActive\n        },\n        set value (isActive: boolean) {\n          self.isActive = isActive\n        },\n      }\n    },\n    removeActivatorEvents () {\n      if (\n        !this.activator ||\n        !this.activatorElement\n      ) return\n\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        (this.activatorElement as any).removeEventListener(key, this.listeners[key])\n      }\n\n      this.listeners = {}\n    },\n    resetActivator () {\n      this.removeActivatorEvents()\n      this.activatorElement = null\n      this.getActivator()\n      this.addActivatorEvents()\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}