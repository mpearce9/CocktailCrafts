{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nimport { attachedRoot } from '../../util/dom';\n\nfunction defaultConditional() {\n  return true;\n}\n\nfunction checkEvent(e, el, binding) {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n\n  var root = attachedRoot(el);\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  var elements = (_typeof(binding.value) === 'object' && binding.value.include || function () {\n    return [];\n  })(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  return !elements.some(function (el) {\n    return el.contains(e.target);\n  });\n}\n\nfunction checkIsActive(e, binding) {\n  var isActive = _typeof(binding.value) === 'object' && binding.value.closeConditional || defaultConditional;\n  return isActive(e);\n}\n\nfunction directive(e, el, binding, vnode) {\n  var handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;\n  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(function () {\n    checkIsActive(e, binding) && handler && handler(e);\n  }, 0);\n}\n\nfunction handleShadow(el, callback) {\n  var root = attachedRoot(el);\n  callback(document);\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root);\n  }\n}\n\nexport var ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted: function inserted(el, binding, vnode) {\n    var onClick = function onClick(e) {\n      return directive(e, el, binding, vnode);\n    };\n\n    var onMousedown = function onMousedown(e) {\n      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);\n    };\n\n    handleShadow(el, function (app) {\n      app.addEventListener('click', onClick, true);\n      app.addEventListener('mousedown', onMousedown, true);\n    });\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: true\n      };\n    }\n\n    el._clickOutside[vnode.context._uid] = {\n      onClick: onClick,\n      onMousedown: onMousedown\n    };\n  },\n  unbind: function unbind(el, binding, vnode) {\n    if (!el._clickOutside) return;\n    handleShadow(el, function (app) {\n      var _el$_clickOutside;\n\n      if (!app || !((_el$_clickOutside = el._clickOutside) != null && _el$_clickOutside[vnode.context._uid])) return;\n      var _el$_clickOutside$vno = el._clickOutside[vnode.context._uid],\n          onClick = _el$_clickOutside$vno.onClick,\n          onMousedown = _el$_clickOutside$vno.onMousedown;\n      app.removeEventListener('click', onClick, true);\n      app.removeEventListener('mousedown', onMousedown, true);\n    });\n    delete el._clickOutside[vnode.context._uid];\n  }\n};\nexport default ClickOutside;","map":{"version":3,"mappings":"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","names":["attachedRoot","defaultConditional","checkEvent","e","el","binding","checkIsActive","root","ShadowRoot","host","target","elements","value","include","push","some","contains","isActive","closeConditional","directive","vnode","handler","_clickOutside","lastMousedownWasOutside","setTimeout","handleShadow","callback","document","ClickOutside","inserted","onClick","onMousedown","app","addEventListener","context","_uid","unbind","_el$_clickOutside","removeEventListener"],"sourceRoot":"","sources":["../../../src/directives/click-outside/index.ts"],"sourcesContent":["import { attachedRoot } from '../../util/dom'\nimport { VNodeDirective } from 'vue/types/vnode'\nimport { VNode } from 'vue'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: Event) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirective extends VNodeDirective {\n  value?: ((e: Event) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction checkEvent (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): boolean {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false\n\n  // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n  const root = attachedRoot(el)\n  if (\n    typeof ShadowRoot !== 'undefined' &&\n    root instanceof ShadowRoot &&\n    root.host === e.target\n  ) return false\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  return !elements.some(el => el.contains(e.target as Node))\n}\n\nfunction checkIsActive (e: PointerEvent, binding: ClickOutsideDirective): boolean | void {\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  return isActive(e)\n}\n\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective, vnode: VNode) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value!.handler\n\n  el._clickOutside!.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e)\n  }, 0)\n}\n\nfunction handleShadow (el: HTMLElement, callback: Function): void {\n  const root = attachedRoot(el)\n\n  callback(document)\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root)\n  }\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el: HTMLElement, binding: ClickOutsideDirective, vnode: VNode) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding, vnode)\n    const onMousedown = (e: Event) => {\n      el._clickOutside!.lastMousedownWasOutside = checkEvent(e as PointerEvent, el, binding)\n    }\n\n    handleShadow(el, (app: HTMLElement) => {\n      app.addEventListener('click', onClick, true)\n      app.addEventListener('mousedown', onMousedown, true)\n    })\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: true,\n      }\n    }\n\n    el._clickOutside[vnode.context!._uid] = {\n      onClick,\n      onMousedown,\n    }\n  },\n\n  unbind (el: HTMLElement, binding: ClickOutsideDirective, vnode: VNode) {\n    if (!el._clickOutside) return\n\n    handleShadow(el, (app: HTMLElement) => {\n      if (!app || !el._clickOutside?.[vnode.context!._uid]) return\n\n      const { onClick, onMousedown } = el._clickOutside[vnode.context!._uid]!\n\n      app.removeEventListener('click', onClick, true)\n      app.removeEventListener('mousedown', onMousedown, true)\n    })\n\n    delete el._clickOutside[vnode.context!._uid]\n  },\n}\n\nexport default ClickOutside\n"]},"metadata":{},"sourceType":"module"}