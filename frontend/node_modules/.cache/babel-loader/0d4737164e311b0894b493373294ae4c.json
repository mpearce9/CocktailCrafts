{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// Mixins\nimport Colorable from '../colorable';\nimport Themeable from '../themeable';\nimport { inject as RegistrableInject } from '../registrable'; // Utilities\n\nimport { deepEqual } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nimport mixins from '../../util/mixins';\nvar baseMixins = mixins(Colorable, RegistrableInject('form'), Themeable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'validatable',\n  props: {\n    disabled: Boolean,\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    errorMessages: {\n      type: [String, Array],\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    messages: {\n      type: [String, Array],\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    readonly: Boolean,\n    rules: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    validateOnBlur: Boolean,\n    value: {\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      errorBucket: [],\n      hasColor: false,\n      hasFocused: false,\n      hasInput: false,\n      isFocused: false,\n      isResetting: false,\n      lazyValue: this.value,\n      valid: false\n    };\n  },\n  computed: {\n    computedColor: function computedColor() {\n      if (this.isDisabled) return undefined;\n      if (this.color) return this.color; // It's assumed that if the input is on a\n      // dark background, the user will want to\n      // have a white color. If the entire app\n      // is setup to be dark, then they will\n      // like want to use their primary color\n\n      if (this.isDark && !this.appIsDark) return 'white';else return 'primary';\n    },\n    hasError: function hasError() {\n      return this.internalErrorMessages.length > 0 || this.errorBucket.length > 0 || this.error;\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess: function hasSuccess() {\n      return this.internalSuccessMessages.length > 0 || this.success;\n    },\n    externalError: function externalError() {\n      return this.internalErrorMessages.length > 0 || this.error;\n    },\n    hasMessages: function hasMessages() {\n      return this.validationTarget.length > 0;\n    },\n    hasState: function hasState() {\n      if (this.isDisabled) return false;\n      return this.hasSuccess || this.shouldValidate && this.hasError;\n    },\n    internalErrorMessages: function internalErrorMessages() {\n      return this.genInternalMessages(this.errorMessages);\n    },\n    internalMessages: function internalMessages() {\n      return this.genInternalMessages(this.messages);\n    },\n    internalSuccessMessages: function internalSuccessMessages() {\n      return this.genInternalMessages(this.successMessages);\n    },\n    internalValue: {\n      get: function get() {\n        return this.lazyValue;\n      },\n      set: function set(val) {\n        this.lazyValue = val;\n        this.$emit('input', val);\n      }\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled || !!this.form && this.form.disabled;\n    },\n    isInteractive: function isInteractive() {\n      return !this.isDisabled && !this.isReadonly;\n    },\n    isReadonly: function isReadonly() {\n      return this.readonly || !!this.form && this.form.readonly;\n    },\n    shouldValidate: function shouldValidate() {\n      if (this.externalError) return true;\n      if (this.isResetting) return false;\n      return this.validateOnBlur ? this.hasFocused && !this.isFocused : this.hasInput || this.hasFocused;\n    },\n    validations: function validations() {\n      return this.validationTarget.slice(0, Number(this.errorCount));\n    },\n    validationState: function validationState() {\n      if (this.isDisabled) return undefined;\n      if (this.hasError && this.shouldValidate) return 'error';\n      if (this.hasSuccess) return 'success';\n      if (this.hasColor) return this.computedColor;\n      return undefined;\n    },\n    validationTarget: function validationTarget() {\n      if (this.internalErrorMessages.length > 0) {\n        return this.internalErrorMessages;\n      } else if (this.successMessages && this.successMessages.length > 0) {\n        return this.internalSuccessMessages;\n      } else if (this.messages && this.messages.length > 0) {\n        return this.internalMessages;\n      } else if (this.shouldValidate) {\n        return this.errorBucket;\n      } else return [];\n    }\n  },\n  watch: {\n    rules: {\n      handler: function handler(newVal, oldVal) {\n        if (deepEqual(newVal, oldVal)) return;\n        this.validate();\n      },\n      deep: true\n    },\n    internalValue: function internalValue() {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true;\n      this.validateOnBlur || this.$nextTick(this.validate);\n    },\n    isFocused: function isFocused(val) {\n      // Should not check validation\n      // if disabled\n      if (!val && !this.isDisabled) {\n        this.hasFocused = true;\n        this.validateOnBlur && this.$nextTick(this.validate);\n      }\n    },\n    isResetting: function isResetting() {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.hasInput = false;\n        _this.hasFocused = false;\n        _this.isResetting = false;\n\n        _this.validate();\n      }, 0);\n    },\n    hasError: function hasError(val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val);\n      }\n    },\n    value: function value(val) {\n      this.lazyValue = val;\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.validate();\n  },\n  created: function created() {\n    this.form && this.form.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.form && this.form.unregister(this);\n  },\n  methods: {\n    genInternalMessages: function genInternalMessages(messages) {\n      if (!messages) return [];else if (Array.isArray(messages)) return messages;else return [messages];\n    },\n\n    /** @public */\n    reset: function reset() {\n      this.isResetting = true;\n      this.internalValue = Array.isArray(this.internalValue) ? [] : null;\n    },\n\n    /** @public */\n    resetValidation: function resetValidation() {\n      this.isResetting = true;\n    },\n\n    /** @public */\n    validate: function validate() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var value = arguments.length > 1 ? arguments[1] : undefined;\n      var errorBucket = [];\n      value = value || this.internalValue;\n      if (force) this.hasInput = this.hasFocused = true;\n\n      for (var index = 0; index < this.rules.length; index++) {\n        var rule = this.rules[index];\n        var valid = typeof rule === 'function' ? rule(value) : rule;\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid || '');\n        } else if (typeof valid !== 'boolean') {\n          consoleError(\"Rules should return a string or boolean, received '\".concat(_typeof(valid), \"' instead\"), this);\n        }\n      }\n\n      this.errorBucket = errorBucket;\n      this.valid = errorBucket.length === 0;\n      return this.valid;\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["Colorable","Themeable","inject","RegistrableInject","deepEqual","consoleError","mixins","baseMixins","extend","name","props","disabled","Boolean","error","errorCount","type","Number","String","errorMessages","Array","messages","readonly","rules","success","successMessages","validateOnBlur","value","required","data","errorBucket","hasColor","hasFocused","hasInput","isFocused","isResetting","lazyValue","valid","computed","computedColor","isDisabled","undefined","color","isDark","appIsDark","hasError","internalErrorMessages","length","hasSuccess","internalSuccessMessages","externalError","hasMessages","validationTarget","hasState","shouldValidate","genInternalMessages","internalMessages","internalValue","get","set","val","$emit","form","isInteractive","isReadonly","validations","slice","validationState","watch","handler","newVal","oldVal","validate","deep","$nextTick","setTimeout","beforeMount","created","register","beforeDestroy","unregister","methods","isArray","reset","resetValidation","force","index","rule","push"],"sourceRoot":"","sources":["../../../src/mixins/validatable/index.ts"],"sourcesContent":["// Mixins\nimport Colorable from '../colorable'\nimport Themeable from '../themeable'\nimport { inject as RegistrableInject } from '../registrable'\n\n// Utilities\nimport { deepEqual } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\nimport { InputMessage, InputValidationRules } from 'vuetify/types'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'form', any>('form'),\n  Themeable,\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'validatable',\n\n  props: {\n    disabled: Boolean,\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1,\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    messages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    readonly: Boolean,\n    rules: {\n      type: Array,\n      default: () => [],\n    } as PropValidator<InputValidationRules>,\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    validateOnBlur: Boolean,\n    value: { required: false },\n  },\n\n  data () {\n    return {\n      errorBucket: [] as string[],\n      hasColor: false,\n      hasFocused: false,\n      hasInput: false,\n      isFocused: false,\n      isResetting: false,\n      lazyValue: this.value,\n      valid: false,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.color) return this.color\n      // It's assumed that if the input is on a\n      // dark background, the user will want to\n      // have a white color. If the entire app\n      // is setup to be dark, then they will\n      // like want to use their primary color\n      if (this.isDark && !this.appIsDark) return 'white'\n      else return 'primary'\n    },\n    hasError (): boolean {\n      return (\n        this.internalErrorMessages.length > 0 ||\n        this.errorBucket.length > 0 ||\n        this.error\n      )\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess (): boolean {\n      return (\n        this.internalSuccessMessages.length > 0 ||\n        this.success\n      )\n    },\n    externalError (): boolean {\n      return this.internalErrorMessages.length > 0 || this.error\n    },\n    hasMessages (): boolean {\n      return this.validationTarget.length > 0\n    },\n    hasState (): boolean {\n      if (this.isDisabled) return false\n\n      return (\n        this.hasSuccess ||\n        (this.shouldValidate && this.hasError)\n      )\n    },\n    internalErrorMessages (): InputValidationRules {\n      return this.genInternalMessages(this.errorMessages)\n    },\n    internalMessages (): InputValidationRules {\n      return this.genInternalMessages(this.messages)\n    },\n    internalSuccessMessages (): InputValidationRules {\n      return this.genInternalMessages(this.successMessages)\n    },\n    internalValue: {\n      get (): unknown {\n        return this.lazyValue\n      },\n      set (val: any) {\n        this.lazyValue = val\n\n        this.$emit('input', val)\n      },\n    },\n    isDisabled (): boolean {\n      return this.disabled || (\n        !!this.form &&\n        this.form.disabled\n      )\n    },\n    isInteractive (): boolean {\n      return !this.isDisabled && !this.isReadonly\n    },\n    isReadonly (): boolean {\n      return this.readonly || (\n        !!this.form &&\n        this.form.readonly\n      )\n    },\n    shouldValidate (): boolean {\n      if (this.externalError) return true\n      if (this.isResetting) return false\n\n      return this.validateOnBlur\n        ? this.hasFocused && !this.isFocused\n        : (this.hasInput || this.hasFocused)\n    },\n    validations (): InputValidationRules {\n      return this.validationTarget.slice(0, Number(this.errorCount))\n    },\n    validationState (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor) return this.computedColor\n      return undefined\n    },\n    validationTarget (): InputValidationRules {\n      if (this.internalErrorMessages.length > 0) {\n        return this.internalErrorMessages\n      } else if (this.successMessages && this.successMessages.length > 0) {\n        return this.internalSuccessMessages\n      } else if (this.messages && this.messages.length > 0) {\n        return this.internalMessages\n      } else if (this.shouldValidate) {\n        return this.errorBucket\n      } else return []\n    },\n  },\n\n  watch: {\n    rules: {\n      handler (newVal, oldVal) {\n        if (deepEqual(newVal, oldVal)) return\n        this.validate()\n      },\n      deep: true,\n    },\n    internalValue () {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true\n      this.validateOnBlur || this.$nextTick(this.validate)\n    },\n    isFocused (val) {\n      // Should not check validation\n      // if disabled\n      if (\n        !val &&\n        !this.isDisabled\n      ) {\n        this.hasFocused = true\n        this.validateOnBlur && this.$nextTick(this.validate)\n      }\n    },\n    isResetting () {\n      setTimeout(() => {\n        this.hasInput = false\n        this.hasFocused = false\n        this.isResetting = false\n        this.validate()\n      }, 0)\n    },\n    hasError (val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val)\n      }\n    },\n    value (val) {\n      this.lazyValue = val\n    },\n  },\n\n  beforeMount () {\n    this.validate()\n  },\n\n  created () {\n    this.form && this.form.register(this)\n  },\n\n  beforeDestroy () {\n    this.form && this.form.unregister(this)\n  },\n\n  methods: {\n    genInternalMessages (messages: InputMessage | null): InputValidationRules {\n      if (!messages) return []\n      else if (Array.isArray(messages)) return messages\n      else return [messages]\n    },\n    /** @public */\n    reset () {\n      this.isResetting = true\n      this.internalValue = Array.isArray(this.internalValue)\n        ? []\n        : null\n    },\n    /** @public */\n    resetValidation () {\n      this.isResetting = true\n    },\n    /** @public */\n    validate (force = false, value?: any): boolean {\n      const errorBucket = []\n      value = value || this.internalValue\n\n      if (force) this.hasInput = this.hasFocused = true\n\n      for (let index = 0; index < this.rules.length; index++) {\n        const rule = this.rules[index]\n        const valid = typeof rule === 'function' ? rule(value) : rule\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid || '')\n        } else if (typeof valid !== 'boolean') {\n          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this)\n        }\n      }\n\n      this.errorBucket = errorBucket\n      this.valid = errorBucket.length === 0\n\n      return this.valid\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}