{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction inserted(el, binding, vnode) {\n  if (typeof window === 'undefined' || !('IntersectionObserver' in window)) return;\n  var modifiers = binding.modifiers || {};\n  var value = binding.value;\n\n  var _ref = _typeof(value) === 'object' ? value : {\n    handler: value,\n    options: {}\n  },\n      handler = _ref.handler,\n      options = _ref.options;\n\n  var observer = new IntersectionObserver(function () {\n    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var observer = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _el$_observe;\n\n    var _observe = (_el$_observe = el._observe) == null ? void 0 : _el$_observe[vnode.context._uid];\n\n    if (!_observe) return; // Just in case, should never fire\n\n    var isIntersecting = entries.some(function (entry) {\n      return entry.isIntersecting;\n    }); // If is not quiet or has already been\n    // initted, invoke the user callback\n\n    if (handler && (!modifiers.quiet || _observe.init) && (!modifiers.once || isIntersecting || _observe.init)) {\n      handler(entries, observer, isIntersecting);\n    }\n\n    if (isIntersecting && modifiers.once) unbind(el, binding, vnode);else _observe.init = true;\n  }, options);\n  el._observe = Object(el._observe);\n  el._observe[vnode.context._uid] = {\n    init: false,\n    observer: observer\n  };\n  observer.observe(el);\n}\n\nfunction unbind(el, binding, vnode) {\n  var _el$_observe2;\n\n  var observe = (_el$_observe2 = el._observe) == null ? void 0 : _el$_observe2[vnode.context._uid];\n  if (!observe) return;\n  observe.observer.unobserve(el);\n  delete el._observe[vnode.context._uid];\n}\n\nexport var Intersect = {\n  inserted: inserted,\n  unbind: unbind\n};\nexport default Intersect;","map":{"version":3,"mappings":";;AAiBA,SAASA,QAAT,CAAmBC,EAAnB,EAAoCC,OAApC,EAAoEC,KAApE,EAAgF;AAC9E,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,EAAE,0BAA0BA,MAA5B,CAArC,EAA0E;AAE1E,MAAMC,SAAS,GAAGH,OAAO,CAACG,SAAR,IAAqB,EAAvC;AACA,MAAMC,KAAK,GAAGJ,OAAO,CAACI,KAAtB;;AACA,aAA6B,QAAOA,KAAP,MAAiB,QAAjB,GACzBA,KADyB,GAEzB;AAAEC,WAAO,EAAED,KAAX;AAAkBE,WAAO,EAAE;AAA3B,GAFJ;AAAA,MAAQD,OAAR,QAAQA,OAAR;AAAA,MAAiBC,OAAjB,QAAiBA,OAAjB;;AAGA,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,YAGtC;AAAA,QAFFC,OAEE,uEAFqC,EAErC;AAAA,QADFF,QACE;;AAAA;;AACF,QAAMG,QAAQ,mBAAGX,EAAE,CAACW,QAAN,qBAAGC,aAAcV,KAAK,CAACW,OAAN,CAAeC,IAA7B,CAAjB;;AACA,QAAI,CAACH,QAAL,EAAe,OAFb,CAEoB;;AAEtB,QAAMI,cAAc,GAAGL,OAAO,CAACM,IAAR,CAAa,eAAK;AAAA,aAAIC,KAAK,CAACF,cAAV;AAAA,KAAlB,CAAvB,CAJE,CAMF;AACA;;AACA,QACET,OAAO,KACL,CAACF,SAAS,CAACc,KAAX,IACAP,QAAQ,CAACQ,IAFJ,CAAP,KAIE,CAACf,SAAS,CAACgB,IAAX,IACAL,cADA,IAEAJ,QAAQ,CAACQ,IANX,CADF,EASE;AACAb,aAAO,CAACI,OAAD,EAAUF,QAAV,EAAoBO,cAApB,CAAP;AACD;;AAED,QAAIA,cAAc,IAAIX,SAAS,CAACgB,IAAhC,EAAsCC,MAAM,CAACrB,EAAD,EAAKC,OAAL,EAAcC,KAAd,CAAN,CAAtC,KACKS,QAAQ,CAACQ,IAAT,GAAgB,IAAhB;AAzBU,KA0BdZ,OA1Bc,CAAjB;AA4BAP,IAAE,CAACW,QAAH,GAAcW,MAAM,CAACtB,EAAE,CAACW,QAAJ,CAApB;AACAX,IAAE,CAACW,QAAH,CAAaT,KAAK,CAACW,OAAN,CAAeC,IAA5B,IAAoC;AAAEK,QAAI,EAAE,KAAR;AAAeX;AAAf,GAApC;AAEAA,UAAQ,CAACe,OAAT,CAAiBvB,EAAjB;AACD;;AAED,SAASqB,MAAT,CAAiBrB,EAAjB,EAAkCC,OAAlC,EAAkEC,KAAlE,EAA8E;AAAA;;AAC5E,MAAMqB,OAAO,oBAAGvB,EAAE,CAACW,QAAN,qBAAGa,cAActB,KAAK,CAACW,OAAN,CAAeC,IAA7B,CAAhB;AACA,MAAI,CAACS,OAAL,EAAc;AAEdA,SAAO,CAACf,QAAR,CAAiBiB,SAAjB,CAA2BzB,EAA3B;AACA,SAAOA,EAAE,CAACW,QAAH,CAAaT,KAAK,CAACW,OAAN,CAAeC,IAA5B,CAAP;AACD;;AAED,OAAO,IAAMY,SAAS,GAAG;AACvB3B,UADuB,EACvBA,QADuB;AAEvBsB;AAFuB,CAAlB;AAKP,eAAeK,SAAf","names":["inserted","el","binding","vnode","window","modifiers","value","handler","options","observer","IntersectionObserver","entries","_observe","_el$_observe","context","_uid","isIntersecting","some","entry","quiet","init","once","unbind","Object","observe","_el$_observe2","unobserve","Intersect"],"sourceRoot":"","sources":["../../../src/directives/intersect/index.ts"],"sourcesContent":["import { VNodeDirective } from 'vue/types/vnode'\nimport { VNode } from 'vue'\n\ntype ObserveHandler = (\n  entries: IntersectionObserverEntry[],\n  observer: IntersectionObserver,\n  isIntersecting: boolean,\n) => void\n\ninterface ObserveVNodeDirective extends Omit<VNodeDirective, 'modifiers'> {\n  value?: ObserveHandler | { handler: ObserveHandler, options?: IntersectionObserverInit }\n  modifiers?: {\n    once?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction inserted (el: HTMLElement, binding: ObserveVNodeDirective, vnode: VNode) {\n  if (typeof window === 'undefined' || !('IntersectionObserver' in window)) return\n\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : { handler: value, options: {} }\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    const _observe = el._observe?.[vnode.context!._uid]\n    if (!_observe) return // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting)\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      handler && (\n        !modifiers.quiet ||\n        _observe.init\n      ) && (\n        !modifiers.once ||\n        isIntersecting ||\n        _observe.init\n      )\n    ) {\n      handler(entries, observer, isIntersecting)\n    }\n\n    if (isIntersecting && modifiers.once) unbind(el, binding, vnode)\n    else _observe.init = true\n  }, options)\n\n  el._observe = Object(el._observe)\n  el._observe![vnode.context!._uid] = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unbind (el: HTMLElement, binding: ObserveVNodeDirective, vnode: VNode) {\n  const observe = el._observe?.[vnode.context!._uid]\n  if (!observe) return\n\n  observe.observer.unobserve(el)\n  delete el._observe![vnode.context!._uid]\n}\n\nexport const Intersect = {\n  inserted,\n  unbind,\n}\n\nexport default Intersect\n"]},"metadata":{},"sourceType":"module"}