{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable';\nimport Routable from '../../mixins/routable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport { keyCodes } from './../../util/helpers';\nimport mixins from '../../util/mixins';\nvar baseMixins = mixins(Routable, // Must be after routable\n// to overwrite activeClass\nGroupableFactory('tabsBar'), Themeable);\nexport default baseMixins.extend().extend().extend({\n  name: 'v-tab',\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      \"default\": true\n    }\n  },\n  data: function data() {\n    return {\n      proxyClass: 'v-tab--active'\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({\n        'v-tab': true\n      }, Routable.options.computed.classes.call(this)), {}, {\n        'v-tab--disabled': this.disabled\n      }, this.groupClasses);\n    },\n    value: function value() {\n      var to = this.to || this.href;\n      if (to == null) return to;\n\n      if (this.$router && this.to === Object(this.to)) {\n        var resolve = this.$router.resolve(this.to, this.$route, this.append);\n        to = resolve.href;\n      }\n\n      return to.replace('#', '');\n    }\n  },\n  methods: {\n    click: function click(e) {\n      // Prevent keyboard actions\n      // from children elements\n      // within disabled tabs\n      if (this.disabled) {\n        e.preventDefault();\n        return;\n      } // If user provides an\n      // actual link, do not\n      // prevent default\n\n\n      if (this.href && this.href.indexOf('#') > -1) e.preventDefault();\n      if (e.detail) this.$el.blur();\n      this.$emit('click', e);\n      this.to || this.toggle();\n    },\n    toggle: function toggle() {\n      // VItemGroup treats a change event as a click\n      if (!this.isActive || !this.tabsBar.mandatory && !this.to) {\n        this.$emit('change');\n      }\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var _this$generateRouteLi = this.generateRouteLink(),\n        tag = _this$generateRouteLi.tag,\n        data = _this$generateRouteLi.data;\n\n    data.attrs = _objectSpread(_objectSpread({}, data.attrs), {}, {\n      'aria-selected': String(this.isActive),\n      role: 'tab',\n      tabindex: this.disabled ? -1 : 0\n    });\n    data.on = _objectSpread(_objectSpread({}, data.on), {}, {\n      keydown: function keydown(e) {\n        if (e.keyCode === keyCodes.enter) _this.click(e);\n\n        _this.$emit('keydown', e);\n      }\n    });\n    return h(tag, data, this.$slots[\"default\"]);\n  }\n});","map":{"version":3,"mappings":"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","names":["factory","GroupableFactory","Routable","Themeable","keyCodes","mixins","baseMixins","extend","name","props","ripple","type","Boolean","Object","data","proxyClass","computed","classes","options","call","disabled","groupClasses","value","to","href","$router","resolve","$route","append","replace","methods","click","e","preventDefault","indexOf","detail","$el","blur","$emit","toggle","isActive","tabsBar","mandatory","render","h","generateRouteLink","tag","attrs","String","role","tabindex","on","keydown","keyCode","enter","$slots"],"sourceRoot":"","sources":["../../../src/components/VTabs/VTab.ts"],"sourcesContent":["// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport Routable from '../../mixins/routable'\nimport Themeable from '../../mixins/themeable'\n\n// Utilities\nimport { keyCodes } from './../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { ExtractVue } from './../../util/mixins'\n\n// Types\nimport { VNode } from 'vue/types'\n\n// Components\nimport VTabsBar from '../VTabs/VTabsBar'\n\nconst baseMixins = mixins(\n  Routable,\n  // Must be after routable\n  // to overwrite activeClass\n  GroupableFactory('tabsBar'),\n  Themeable\n)\n\ntype VTabBarInstance = InstanceType<typeof VTabsBar>\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  tabsBar: VTabBarInstance\n}\n\nexport default baseMixins.extend<options>().extend(\n  /* @vue/component */\n).extend({\n  name: 'v-tab',\n\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      default: true,\n    },\n  },\n\n  data: () => ({\n    proxyClass: 'v-tab--active',\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-tab': true,\n        ...Routable.options.computed.classes.call(this),\n        'v-tab--disabled': this.disabled,\n        ...this.groupClasses,\n      }\n    },\n    value (): any {\n      let to = this.to || this.href\n\n      if (to == null) return to\n\n      if (this.$router &&\n        this.to === Object(this.to)\n      ) {\n        const resolve = this.$router.resolve(\n          this.to,\n          this.$route,\n          this.append\n        )\n\n        to = resolve.href\n      }\n\n      return to.replace('#', '')\n    },\n  },\n\n  methods: {\n    click (e: KeyboardEvent | MouseEvent): void {\n      // Prevent keyboard actions\n      // from children elements\n      // within disabled tabs\n      if (this.disabled) {\n        e.preventDefault()\n        return\n      }\n\n      // If user provides an\n      // actual link, do not\n      // prevent default\n      if (this.href &&\n        this.href.indexOf('#') > -1\n      ) e.preventDefault()\n\n      if (e.detail) this.$el.blur()\n\n      this.$emit('click', e)\n\n      this.to || this.toggle()\n    },\n    toggle () {\n      // VItemGroup treats a change event as a click\n      if (!this.isActive || (!this.tabsBar.mandatory && !this.to)) {\n        this.$emit('change')\n      }\n    },\n  },\n\n  render (h): VNode {\n    const { tag, data } = this.generateRouteLink()\n\n    data.attrs = {\n      ...data.attrs,\n      'aria-selected': String(this.isActive),\n      role: 'tab',\n      tabindex: this.disabled ? -1 : 0,\n    }\n    data.on = {\n      ...data.on,\n      keydown: (e: KeyboardEvent) => {\n        if (e.keyCode === keyCodes.enter) this.click(e)\n\n        this.$emit('keydown', e)\n      },\n    }\n\n    return h(tag, data, this.$slots.default)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}