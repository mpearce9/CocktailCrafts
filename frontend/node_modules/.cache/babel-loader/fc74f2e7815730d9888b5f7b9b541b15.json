{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vue from 'vue';\nimport { consoleError } from '../../util/console';\nimport { isCssColor } from '../../util/colorUtils';\nexport default Vue.extend({\n  name: 'colorable',\n  props: {\n    color: String\n  },\n  methods: {\n    setBackgroundColor: function setBackgroundColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data[\"class\"] === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = _objectSpread(_objectSpread({}, data.style), {}, {\n          'background-color': \"\".concat(color),\n          'border-color': \"\".concat(color)\n        });\n      } else if (color) {\n        data[\"class\"] = _objectSpread(_objectSpread({}, data[\"class\"]), {}, _defineProperty({}, color, true));\n      }\n\n      return data;\n    },\n    setTextColor: function setTextColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data[\"class\"] === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = _objectSpread(_objectSpread({}, data.style), {}, {\n          color: \"\".concat(color),\n          'caret-color': \"\".concat(color)\n        });\n      } else if (color) {\n        var _color$toString$trim$ = color.toString().trim().split(' ', 2),\n            _color$toString$trim$2 = _slicedToArray(_color$toString$trim$, 2),\n            colorName = _color$toString$trim$2[0],\n            colorModifier = _color$toString$trim$2[1];\n\n        data[\"class\"] = _objectSpread(_objectSpread({}, data[\"class\"]), {}, _defineProperty({}, colorName + '--text', true));\n\n        if (colorModifier) {\n          data[\"class\"]['text--' + colorModifier] = true;\n        }\n      }\n\n      return data;\n    }\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,eAAeF,GAAG,CAACG,MAAJ,CAAW;AACxBC,MAAI,EAAE,WADkB;AAGxBC,OAAK,EAAE;AACLC,SAAK,EAAEC;AADF,GAHiB;AAOxBC,SAAO,EAAE;AACPC,sBADO,8BACaH,KADb,EACyD;AAAA,UAApBI,IAAoB,uEAAF,EAAE;;AAC9D,UAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAV,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAI,OAAOA,IAAI,SAAX,KAAsB,QAA1B,EAAoC;AAClC;AACAT,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;AACrBI,YAAI,CAACC,KAAL,mCACKD,IAAI,CAACC,KADV;AAEE,wCAAuBL,KAAvB,CAFF;AAGE,oCAAmBA,KAAnB;AAHF;AADF,aAMO,IAAIA,KAAJ,EAAW;AAChBI,YAAI,SAAJ,mCACKA,IAAI,SADT,2BAEGJ,KAFH,EAEW,IAFX;AAID;;AAED,aAAOI,IAAP;AA3BK;AA8BPE,gBA9BO,wBA8BON,KA9BP,EA8BmD;AAAA,UAApBI,IAAoB,uEAAF,EAAE;;AACxD,UAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAV,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAI,OAAOA,IAAI,SAAX,KAAsB,QAA1B,EAAoC;AAClC;AACAT,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;AACrBI,YAAI,CAACC,KAAL,mCACKD,IAAI,CAACC,KADV;AAEEL,eAAK,YAAKA,KAAL,CAFP;AAGE,mCAAkBA,KAAlB;AAHF;AADF,aAMO,IAAIA,KAAJ,EAAW;AAChB,oCAAmCA,KAAK,CAACO,QAAN,GAAiBC,IAAjB,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CAAnC;AAAA;AAAA,YAAOC,SAAP;AAAA,YAAkBC,aAAlB;;AACAP,YAAI,SAAJ,mCACKA,IAAI,SADT,2BAEGM,SAAS,GAAG,QAFf,EAE0B,IAF1B;;AAIA,YAAIC,aAAJ,EAAmB;AACjBP,cAAI,SAAJ,CAAW,WAAWO,aAAtB,IAAuC,IAAvC;AACD;AACF;;AACD,aAAOP,IAAP;AACD;AA5DM;AAPe,CAAX,CAAf","names":["Vue","consoleError","isCssColor","extend","name","props","color","String","methods","setBackgroundColor","data","style","setTextColor","toString","trim","split","colorName","colorModifier"],"sourceRoot":"","sources":["../../../src/mixins/colorable/index.ts"],"sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\nimport { consoleError } from '../../util/console'\nimport { isCssColor } from '../../util/colorUtils'\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String,\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`,\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true,\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          color: `${color}`,\n          'caret-color': `${color}`,\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true,\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}