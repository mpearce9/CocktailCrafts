{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport * as ThemeUtils from './utils';\nimport { getNestedValue } from '../../util/helpers'; // Types\n\nimport Vue from 'vue';\nexport var Theme = /*#__PURE__*/function (_Service) {\n  _inherits(Theme, _Service);\n\n  var _super = _createSuper(Theme);\n\n  function Theme(preset) {\n    var _this;\n\n    _classCallCheck(this, Theme);\n\n    _this = _super.call(this);\n    _this.disabled = false;\n    _this.isDark = null;\n    _this.unwatch = null;\n    _this.vueMeta = null;\n    var _preset$Theme$propert = preset[Theme.property],\n        dark = _preset$Theme$propert.dark,\n        disable = _preset$Theme$propert.disable,\n        options = _preset$Theme$propert.options,\n        themes = _preset$Theme$propert.themes;\n    _this.dark = Boolean(dark);\n    _this.defaults = _this.themes = themes;\n    _this.options = options;\n\n    if (disable) {\n      _this.disabled = true;\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this.themes = {\n      dark: _this.fillVariant(themes.dark, true),\n      light: _this.fillVariant(themes.light, false)\n    };\n    return _this;\n  } // When setting css, check for element and apply new values\n\n  /* eslint-disable-next-line accessor-pairs */\n\n\n  _createClass(Theme, [{\n    key: \"css\",\n    set: function set(val) {\n      if (this.vueMeta) {\n        if (this.isVueMeta23) {\n          this.applyVueMeta23();\n        }\n\n        return;\n      }\n\n      this.checkOrCreateStyleElement() && (this.styleEl.innerHTML = val);\n    }\n  }, {\n    key: \"dark\",\n    get: function get() {\n      return Boolean(this.isDark);\n    } // Apply current theme default\n    // only called on client side\n    ,\n    set: function set(val) {\n      var oldDark = this.isDark;\n      this.isDark = val; // Only apply theme after dark\n      // has already been set before\n\n      oldDark != null && this.applyTheme();\n    }\n  }, {\n    key: \"applyTheme\",\n    value: function applyTheme() {\n      if (this.disabled) return this.clearCss();\n      this.css = this.generatedStyles;\n    }\n  }, {\n    key: \"clearCss\",\n    value: function clearCss() {\n      this.css = '';\n    } // Initialize theme for SSR and SPA\n    // Attach to ssrContext head or\n    // apply new theme to document\n\n  }, {\n    key: \"init\",\n    value: function init(root, ssrContext) {\n      if (this.disabled) return;\n      /* istanbul ignore else */\n\n      if (root.$meta) {\n        this.initVueMeta(root);\n      } else if (ssrContext) {\n        this.initSSR(ssrContext);\n      }\n\n      this.initTheme(root);\n    } // Allows for you to set target theme\n\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme, value) {\n      this.themes[theme] = Object.assign(this.themes[theme], value);\n      this.applyTheme();\n    } // Reset theme defaults\n\n  }, {\n    key: \"resetThemes\",\n    value: function resetThemes() {\n      this.themes.light = Object.assign({}, this.defaults.light);\n      this.themes.dark = Object.assign({}, this.defaults.dark);\n      this.applyTheme();\n    } // Check for existence of style element\n\n  }, {\n    key: \"checkOrCreateStyleElement\",\n    value: function checkOrCreateStyleElement() {\n      this.styleEl = document.getElementById('vuetify-theme-stylesheet');\n      /* istanbul ignore next */\n\n      if (this.styleEl) return true;\n      this.genStyleElement(); // If doesn't have it, create it\n\n      return Boolean(this.styleEl);\n    }\n  }, {\n    key: \"fillVariant\",\n    value: function fillVariant() {\n      var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var dark = arguments.length > 1 ? arguments[1] : undefined;\n      var defaultTheme = this.themes[dark ? 'dark' : 'light'];\n      return Object.assign({}, defaultTheme, theme);\n    } // Generate the style element\n    // if applicable\n\n  }, {\n    key: \"genStyleElement\",\n    value: function genStyleElement() {\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') return;\n      /* istanbul ignore next */\n\n      this.styleEl = document.createElement('style');\n      this.styleEl.type = 'text/css';\n      this.styleEl.id = 'vuetify-theme-stylesheet';\n\n      if (this.options.cspNonce) {\n        this.styleEl.setAttribute('nonce', this.options.cspNonce);\n      }\n\n      document.head.appendChild(this.styleEl);\n    }\n  }, {\n    key: \"initVueMeta\",\n    value: function initVueMeta(root) {\n      var _this2 = this;\n\n      this.vueMeta = root.$meta();\n\n      if (this.isVueMeta23) {\n        // vue-meta needs to apply after mounted()\n        root.$nextTick(function () {\n          _this2.applyVueMeta23();\n        });\n        return;\n      }\n\n      var metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo';\n      var metaInfo = root.$options[metaKeyName] || {};\n\n      root.$options[metaKeyName] = function () {\n        metaInfo.style = metaInfo.style || [];\n        var vuetifyStylesheet = metaInfo.style.find(function (s) {\n          return s.id === 'vuetify-theme-stylesheet';\n        });\n\n        if (!vuetifyStylesheet) {\n          metaInfo.style.push({\n            cssText: _this2.generatedStyles,\n            type: 'text/css',\n            id: 'vuetify-theme-stylesheet',\n            nonce: (_this2.options || {}).cspNonce\n          });\n        } else {\n          vuetifyStylesheet.cssText = _this2.generatedStyles;\n        }\n\n        return metaInfo;\n      };\n    }\n  }, {\n    key: \"applyVueMeta23\",\n    value: function applyVueMeta23() {\n      var _this$vueMeta$addApp = this.vueMeta.addApp('vuetify'),\n          set = _this$vueMeta$addApp.set;\n\n      set({\n        style: [{\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: this.options.cspNonce\n        }]\n      });\n    }\n  }, {\n    key: \"initSSR\",\n    value: function initSSR(ssrContext) {\n      // SSR\n      var nonce = this.options.cspNonce ? \" nonce=\\\"\".concat(this.options.cspNonce, \"\\\"\") : '';\n      ssrContext.head = ssrContext.head || '';\n      ssrContext.head += \"<style type=\\\"text/css\\\" id=\\\"vuetify-theme-stylesheet\\\"\".concat(nonce, \">\").concat(this.generatedStyles, \"</style>\");\n    }\n  }, {\n    key: \"initTheme\",\n    value: function initTheme(root) {\n      var _this3 = this;\n\n      // Only watch for reactivity on client side\n      if (typeof document === 'undefined') return; // If we get here somehow, ensure\n      // existing instance is removed\n\n      if (this.unwatch) {\n        this.unwatch();\n        this.unwatch = null;\n      } // TODO: Update to use RFC if merged\n      // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n\n\n      root.$once('hook:created', function () {\n        var obs = Vue.observable({\n          themes: _this3.themes\n        });\n        _this3.unwatch = root.$watch(function () {\n          return obs.themes;\n        }, function () {\n          return _this3.applyTheme();\n        }, {\n          deep: true\n        });\n      });\n      this.applyTheme();\n    }\n  }, {\n    key: \"currentTheme\",\n    get: function get() {\n      var target = this.dark ? 'dark' : 'light';\n      return this.themes[target];\n    }\n  }, {\n    key: \"generatedStyles\",\n    get: function get() {\n      var theme = this.parsedTheme;\n      /* istanbul ignore next */\n\n      var options = this.options || {};\n      var css;\n\n      if (options.themeCache != null) {\n        css = options.themeCache.get(theme);\n        /* istanbul ignore if */\n\n        if (css != null) return css;\n      }\n\n      css = ThemeUtils.genStyles(theme, options.customProperties);\n\n      if (options.minifyTheme != null) {\n        css = options.minifyTheme(css);\n      }\n\n      if (options.themeCache != null) {\n        options.themeCache.set(theme, css);\n      }\n\n      return css;\n    }\n  }, {\n    key: \"parsedTheme\",\n    get: function get() {\n      return ThemeUtils.parse(this.currentTheme || {}, undefined, getNestedValue(this.options, ['variations'], true));\n    } // Is using v2.3 of vue-meta\n    // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n\n  }, {\n    key: \"isVueMeta23\",\n    get: function get() {\n      return typeof this.vueMeta.addApp === 'function';\n    }\n  }]);\n\n  return Theme;\n}(Service);\nTheme.property = 'theme';","map":{"version":3,"mappings":"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","names":["Service","ThemeUtils","getNestedValue","Vue","Theme","preset","property","dark","disable","options","themes","Boolean","defaults","disabled","fillVariant","light","val","vueMeta","isVueMeta23","applyVueMeta23","checkOrCreateStyleElement","styleEl","innerHTML","isDark","oldDark","applyTheme","clearCss","css","generatedStyles","root","ssrContext","$meta","initVueMeta","initSSR","initTheme","theme","value","Object","assign","document","getElementById","genStyleElement","defaultTheme","createElement","type","id","cspNonce","setAttribute","head","appendChild","$nextTick","metaKeyName","getOptions","keyName","metaInfo","$options","style","vuetifyStylesheet","find","s","push","cssText","nonce","addApp","set","unwatch","$once","obs","observable","$watch","deep","target","parsedTheme","themeCache","get","genStyles","customProperties","minifyTheme","parse","currentTheme","undefined"],"sourceRoot":"","sources":["../../../src/services/theme/index.ts"],"sourcesContent":["/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport * as ThemeUtils from './utils'\nimport { getNestedValue } from '../../util/helpers'\n\n// Types\nimport Vue from 'vue'\nimport { VuetifyPreset } from 'vuetify/types/services/presets'\nimport {\n  VuetifyParsedTheme,\n  VuetifyThemes,\n  VuetifyThemeVariant,\n  Theme as ITheme,\n} from 'vuetify/types/services/theme'\n\nexport class Theme extends Service {\n  static property: 'theme' = 'theme'\n\n  public disabled = false\n\n  public options: ITheme['options']\n\n  public styleEl?: HTMLStyleElement\n\n  public themes: VuetifyThemes\n\n  public defaults: VuetifyThemes\n\n  private isDark = null as boolean | null\n\n  private unwatch = null as (() => void) | null\n\n  private vueMeta = null as any | null\n\n  constructor (preset: VuetifyPreset) {\n    super()\n\n    const {\n      dark,\n      disable,\n      options,\n      themes,\n    } = preset[Theme.property]\n\n    this.dark = Boolean(dark)\n    this.defaults = this.themes = themes\n    this.options = options\n\n    if (disable) {\n      this.disabled = true\n\n      return\n    }\n\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false),\n    }\n  }\n\n  // When setting css, check for element and apply new values\n  /* eslint-disable-next-line accessor-pairs */\n  set css (val: string) {\n    if (this.vueMeta) {\n      if (this.isVueMeta23) {\n        this.applyVueMeta23()\n      }\n      return\n    }\n    this.checkOrCreateStyleElement() && (this.styleEl!.innerHTML = val)\n  }\n\n  set dark (val: boolean) {\n    const oldDark = this.isDark\n\n    this.isDark = val\n    // Only apply theme after dark\n    // has already been set before\n    oldDark != null && this.applyTheme()\n  }\n\n  get dark () {\n    return Boolean(this.isDark)\n  }\n\n  // Apply current theme default\n  // only called on client side\n  public applyTheme (): void {\n    if (this.disabled) return this.clearCss()\n\n    this.css = this.generatedStyles\n  }\n\n  public clearCss (): void {\n    this.css = ''\n  }\n\n  // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n  public init (root: Vue, ssrContext?: any): void {\n    if (this.disabled) return\n\n    /* istanbul ignore else */\n    if ((root as any).$meta) {\n      this.initVueMeta(root)\n    } else if (ssrContext) {\n      this.initSSR(ssrContext)\n    }\n\n    this.initTheme(root)\n  }\n\n  // Allows for you to set target theme\n  public setTheme (theme: 'light' | 'dark', value: object) {\n    this.themes[theme] = Object.assign(this.themes[theme], value)\n    this.applyTheme()\n  }\n\n  // Reset theme defaults\n  public resetThemes () {\n    this.themes.light = Object.assign({}, this.defaults.light)\n    this.themes.dark = Object.assign({}, this.defaults.dark)\n    this.applyTheme()\n  }\n\n  // Check for existence of style element\n  private checkOrCreateStyleElement (): boolean {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet') as HTMLStyleElement\n\n    /* istanbul ignore next */\n    if (this.styleEl) return true\n\n    this.genStyleElement() // If doesn't have it, create it\n\n    return Boolean(this.styleEl)\n  }\n\n  private fillVariant (\n    theme: Partial<VuetifyThemeVariant> = {},\n    dark: boolean\n  ): VuetifyThemeVariant {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light']\n\n    return Object.assign({},\n      defaultTheme,\n      theme\n    )\n  }\n\n  // Generate the style element\n  // if applicable\n  private genStyleElement (): void {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return\n\n    /* istanbul ignore next */\n    this.styleEl = document.createElement('style')\n    this.styleEl.type = 'text/css'\n    this.styleEl.id = 'vuetify-theme-stylesheet'\n\n    if (this.options.cspNonce) {\n      this.styleEl.setAttribute('nonce', this.options.cspNonce)\n    }\n\n    document.head.appendChild(this.styleEl)\n  }\n\n  private initVueMeta (root: any) {\n    this.vueMeta = root.$meta()\n    if (this.isVueMeta23) {\n      // vue-meta needs to apply after mounted()\n      root.$nextTick(() => {\n        this.applyVueMeta23()\n      })\n      return\n    }\n\n    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo'\n    const metaInfo = root.$options[metaKeyName] || {}\n\n    root.$options[metaKeyName] = () => {\n      metaInfo.style = metaInfo.style || []\n\n      const vuetifyStylesheet = metaInfo.style.find((s: any) => s.id === 'vuetify-theme-stylesheet')\n\n      if (!vuetifyStylesheet) {\n        metaInfo.style.push({\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce,\n        })\n      } else {\n        vuetifyStylesheet.cssText = this.generatedStyles\n      }\n\n      return metaInfo\n    }\n  }\n\n  private applyVueMeta23 () {\n    const { set } = this.vueMeta.addApp('vuetify')\n\n    set({\n      style: [{\n        cssText: this.generatedStyles,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n        nonce: this.options.cspNonce,\n      }],\n    })\n  }\n\n  private initSSR (ssrContext?: any) {\n    // SSR\n    const nonce = this.options.cspNonce ? ` nonce=\"${this.options.cspNonce}\"` : ''\n    ssrContext.head = ssrContext.head || ''\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`\n  }\n\n  private initTheme (root: Vue) {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return\n\n    // If we get here somehow, ensure\n    // existing instance is removed\n    if (this.unwatch) {\n      this.unwatch()\n      this.unwatch = null\n    }\n\n    // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n    root.$once('hook:created', () => {\n      const obs = Vue.observable({ themes: this.themes })\n      this.unwatch = root.$watch(() => obs.themes, () => this.applyTheme(), { deep: true })\n    })\n    this.applyTheme()\n  }\n\n  get currentTheme () {\n    const target = this.dark ? 'dark' : 'light'\n\n    return this.themes[target]\n  }\n\n  get generatedStyles (): string {\n    const theme = this.parsedTheme\n    /* istanbul ignore next */\n    const options = this.options || {}\n    let css\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme)\n      /* istanbul ignore if */\n      if (css != null) return css\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties)\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css)\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css)\n    }\n\n    return css\n  }\n\n  get parsedTheme (): VuetifyParsedTheme {\n    return ThemeUtils.parse(\n      this.currentTheme || {},\n      undefined,\n      getNestedValue(this.options, ['variations'], true)\n    )\n  }\n\n  // Is using v2.3 of vue-meta\n  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n  private get isVueMeta23 (): boolean {\n    return typeof this.vueMeta.addApp === 'function'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}